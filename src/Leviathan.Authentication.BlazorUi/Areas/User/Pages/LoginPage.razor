@page "/user/login"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop;

@attribute [AllowAnonymous]
@inject IAuthenticationService AuthenticationService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<script src="/js/CookieManager.js" type="module"></script>

<h3>Login</h3>

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<InputText id="username" @bind-Value="loginModel.UserName" placeholder="Username" required />
	<InputText type="password" id="password" @bind-Value="loginModel.Password" placeholder="Password" required />

	<button type="submit">Login</button>

</EditForm>

<div>
	<button @onclick="HandleLogout">Logout</button>
</div>

@code {
	private Leviathan.Authentication.LoginModel loginModel = new();

	private async Task HandleLogin() {
		var rslt = await AuthenticationService.Login(loginModel);
		if (!string.IsNullOrEmpty(rslt.Token)) {
			// Set the token in a secure HTTP-only cookie using JSInterop
			await JSRuntime.InvokeVoidAsync("CookieManager.setCookie", "AuthToken", rslt.Token, 3);
			await JSRuntime.InvokeVoidAsync("navigateTo", "/");
			;
		}
	}

	private async Task HandleLogout() {
		await JSRuntime.InvokeVoidAsync("CookieManager.eraseCookie", "AuthToken");
		await JSRuntime.InvokeVoidAsync("navigateTo", "/");
	}
}
