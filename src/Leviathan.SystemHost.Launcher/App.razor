@using System.Reflection;
@using Leviathan.Authentication.BlazorUi.Areas.User.Pages;
@inject NavigationManager NavigationManager;

<CascadingAuthenticationState>
	<Router AppAssembly="@typeof(App).Assembly" AdditionalAssemblies="@GetAssemblies()">
		<Found Context="routeData">
			<AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" >
				<NotAuthorized>
					@{
						Task.Run(async () => {
							await Task.Delay(1);
							NavigationManager.NavigateTo("/user/login");
						});
					}
				</NotAuthorized>

			</AuthorizeRouteView>
			<FocusOnNavigate RouteData="@routeData" Selector="h1" />
		</Found>
		<NotFound>
			<PageTitle>Not found</PageTitle>
			<LayoutView Layout="@typeof(MainLayout)">
				<p role="alert">Sorry, there's nothing at this address.</p>
			</LayoutView>
		</NotFound>
	</Router>
</CascadingAuthenticationState>

@code {
	IEnumerable<Assembly> GetAssemblies() {
		yield return typeof(LoginPage).Assembly;
	}
}